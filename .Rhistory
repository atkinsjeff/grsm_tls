knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(viridis)
library(kableExtra)
require(ggmap)
require(rgdal)
require(raster)
require(sf)
require(stars)
# importing
dem <- raster("./data/n35_w084_1arc_v3.tif")
plot(dem)
#### make plot
#1. Open jpeg file
# plot.name1 <- paste(output_directory, ID, sep = "")
# plot.name2 <- paste(plot.name1, "2from_lidar.jpg", sep = "")
# jpeg(plot.name2, width = 500, height = 500)
# SET RASTER EXTENT
bound <- extent(-83.7, -83.3, 35.3, 35.8)
r <- dem
r <- setExtent(r, bound, keepres = TRUE)
#
# gps %>%
#   filter(plotType == "distributed") -> points
gps %>%
filter(used == "y") -> points
x11()
raster::plot(masked, size = 2, col = (viridis(32)), ylim = c(35.4, 35.8), main = "GRSM")
points(points$decimalLongitude, points$decimalLatitude, pch = 21, bg = "white", cex = 1 )
text(points$decimalLongitude, points$decimalLatitude, points$plotID, pos = 4)
nps %>%
filter(UNIT_CODE == "GRSM") -> shp.grsm
x11()
ggplot()+
geom_stars(data = shp.grsm) +
aes(fill = dem) +
ggtitle("national parks") +
coord_sf()
nps <- st_read("./data/nps_boundary/nps_boundary.shp")
st_crs(nps)
crs(dem)
nps <- st_transform(nps, "+proj=longlat +datum=WGS84
+no_defs +ellps=WGS84 +towgs84=0,0,0")
nps %>%
filter(UNIT_CODE == "GRSM") -> shp.grsm
x11()
ggplot()+
geom_stars(data = shp.grsm) +
aes(fill = dem) +
ggtitle("national parks") +
coord_sf()
#gps mapping file
require(ggmap)
require(ggplot2)
require(rgdal)
require(raster)
require(viridis)
require(tidyverse)
require(sf)
require(stars)
#importing gps file
gps <- read.csv("./data/grsm_sorted_plot_info.csv")
tls <- read.csv("./data/tls_metrics.csv")
#make a new plotID column
tls$plotID <- substring(tls$scan, 5,12)
df <- merge(gps, tls)
plot(df$elevation, df$p90)
#
ggplot(df, aes(x = elevation, y = dsd))+
geom_point(size = 2)+
geom_smooth(method = "lm")
ggplot(df, aes(x = nlcdClass, y = d, fill = nlcdClass))+
geom_boxplot()
ggplot(df, aes(x = nlcdClass, y = p90, fill = nlcdClass))+
geom_boxplot()
#linear models
lm.p90 <- lm(p90 ~ elevation + slopeAspect + elevation:slopeAspect, data = df)
###############
# importing
dem <- raster("./data/n35_w084_1arc_v3.tif")
plot(dem)
#### make plot
#1. Open jpeg file
# plot.name1 <- paste(output_directory, ID, sep = "")
# plot.name2 <- paste(plot.name1, "2from_lidar.jpg", sep = "")
# jpeg(plot.name2, width = 500, height = 500)
# SET RASTER EXTENT
bound <- extent(-83.7, -83.3, 35.3, 35.8)
r <- dem
r <- setExtent(r, bound, keepres = TRUE)
#
# gps %>%
#   filter(plotType == "distributed") -> points
gps %>%
filter(used == "y") -> points
x11()
raster::plot(masked, size = 2, col = (viridis(32)), ylim = c(35.4, 35.8), main = "GRSM")
points(points$decimalLongitude, points$decimalLatitude, pch = 21, bg = "white", cex = 1 )
text(points$decimalLongitude, points$decimalLatitude, points$plotID, pos = 4)
# with no boundary
x11()
raster::plot(dem, size = 2, col = (viridis(32)), ylim = c(35.3, 35.8), main = "GRSM")
points(points$decimalLongitude, points$decimalLatitude, pch = 21, bg = "white", cex = 1)
text(points$decimalLongitude, points$decimalLatitude, points$plotID, pos = 4)
nps <- st_read("./data/nps_boundary/nps_boundary.shp")
st_crs(nps)
crs(dem)
nps <- st_transform(nps, "+proj=longlat +datum=WGS84
+no_defs +ellps=WGS84 +towgs84=0,0,0")
nps %>%
filter(UNIT_CODE == "GRSM") -> shp.grsm
x11()
ggplot()+
geom_stars(data = shp.grsm) +
aes(fill = dem) +
ggtitle("national parks") +
coord_sf()
y <- crop(dem, shp.grsm, snap = "in")
masked <- mask(x = dem, mask = shp.grsm)
plot(masked)
plot(y, main = "" )
x11()
raster::plot(dem, size = 2, col = (viridis(32)), ylim = c(35.3, 35.8), main = "GRSM")
points(points$decimalLongitude, points$decimalLatitude, pch = 21, bg = "white", cex = 1)
text(points$decimalLongitude, points$decimalLatitude, points$plotID, pos = 4)
x11()
ggplot()+
geom_stars(data = shp.grsm) +
aes(fill = dem) +
ggtitle("national parks") +
coord_sf()
install.packages("ggrepel")
require(ggrepel)
# with no boundary
x11()
raster::plot(dem, size = 2, col = (viridis(32)), ylim = c(35.3, 35.8), main = "GRSM")
points(points$decimalLongitude, points$decimalLatitude, pch = 21, bg = "white", cex = 1)
geom_text_repel(points$decimalLongitude, points$decimalLatitude, points$plotID)
install.packages("ggspatial")
str(dem)
ggplot() +
geom_raster(data = dem , aes(x = x, y = y, fill = data)) +
coord_quickmap()
ggplot() +
geom_raster(data = dem , aes(x = x, y = y)) +
coord_quickmap()
plot(dem)
hist(dem)
summary(dem)
str(dem)
dem@name
ggplot() +
geom_raster(dem)
#importing gps file
gps <- read.csv("./data/grsm_sorted_plot_info.csv")
tls <- read.csv("./data/tls_metrics.csv")
#make a new plotID column
tls$plotID <- substring(tls$scan, 5,12)
df <- merge(gps, tls)
plot(df$elevation, df$p90)
#importing gps file
gps <- read.csv("./data/grsm_sorted_plot_info.csv")
tls <- read.csv("./data/tls_metrics.csv")
#make a new plotID column
tls$plotID <- substring(tls$scan, 5,12)
df <- merge(gps, tls)
plot(df$elevation, df$p90)
dem <- raster("./data/n35_w084_1arc_v3.tif")
plot(dem)
gps %>%
filter(used == "y") -> points
summary(points)
str(gps)
x11()
raster::plot(masked, size = 2, col = (viridis(32)), ylim = c(35.4, 35.8), main = "GRSM")
points(points$decimalLongitude, points$decimalLatitude, pch = 21, bg = "white", cex = 1 )
text(points$decimalLongitude, points$decimalLatitude, points$plotID, pos = 4)
ggmap(dem)
x11()
raster::plot(dem, size = 2, col = (viridis(32)), ylim = c(35.3, 35.8), main = "GRSM")
points(points$decimalLongitude, points$decimalLatitude, pch = 21, bg = "white", cex = 1)
geom_text_repel(points$decimalLongitude, points$decimalLatitude, points$plotID)
x11()
raster::plot(dem, size = 2, col = (viridis(32)), ylim = c(35.3, 35.8), main = "GRSM")
points(points$decimalLongitude, points$decimalLatitude, pch = 21, bg = "white", cex = 1)
text(points$decimalLongitude, points$decimalLatitude, points$plotID)
x11()
raster::plot(dem, size = 2, col = (viridis(32)), ylim = c(35.5, 35.7), main = "GRSM")
points(points$decimalLongitude, points$decimalLatitude, pch = 21, bg = "white", cex = 1)
text(points$decimalLongitude, points$decimalLatitude, points$plotID)
x11()
raster::plot(dem, size = 2, col = (viridis(32)), ylim = c(35.3, 35.8), main = "GRSM")
points(points$decimalLongitude, points$decimalLatitude, pch = 21, bg = "white", cex = 1)
str(points)
# with no boundary
x11()
raster::plot(dem, size = 2, col = (viridis(32)), ylim = c(35.3, 35.8), main = "GRSM")
points(points$decimalLongitude, points$decimalLatitude, pch = 21, bg = "white", cex = 1, fill = plotID )
x11()
raster::plot(dem, size = 2, col = (viridis(32)), ylim = c(35.3, 35.8), main = "GRSM")
points(points$decimalLongitude, points$decimalLatitude, pch = 21, bg = "white", cex = 1, fill = points$plotID )
list.files("./data")
# imports main data file
df <- read.csv("./data/grsm_atkins_walter_stovall.csv")
# neon related data
neon <- read.csv("./data/grsm_sorted_plot_info.csv")
# sort the neon down
neon %>%
select(plotID, elevation) %>%
data.frame() -> neon.elev
# neon related data
neon <- read.csv("./data/grsm_sorted_plot_info.csv")
head(neon)
neon$plotID
neon$elevation
neon %>%
select(plotID, elevation) %>%
data.frame() -> neon.elev
# sort the neon down
neon %>%
select(plotID, elevation)  -> neon.elev
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(viridis)
library(kableExtra)
require(ggmap)
require(rgdal)
require(raster)
require(sf)
require(stars)
require(ggrepel)
neon %>%
select(plotID, elevation) %>%
data.frame() -> neon.elev
?select
neon %>%
dplyr::select(plotID, elevation) %>%
data.frame() -> neon.elev
list.files("./data")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(viridis)
library(kableExtra)
plant <- read.csv("./data/plant_diversity.csv")
head(plant)
head(df)
# imports main data file
all.data <- read.csv("./data/grsm_atkins_walter_stovall.csv")
plant <- read.csv("./data/plant_diversity.csv")
# neon related data
neon <- read.csv("./data/grsm_sorted_plot_info.csv")
neon %>%
dplyr::select(plotID, elevation) %>%
data.frame() -> neon.elev
head(all.data)
#@
df <- merge(df[1:9,], neon.elev, by = "plotID")
head(df)
df[1:9,]
#@
df <- merge(df[,1:9], neon.elev, by = "plotID")
head(df)
df <- merge(df, plant, by = "plotID")
df
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(viridis)
library(kableExtra)
# imports main data file
all.data <- read.csv("./data/grsm_atkins_walter_stovall.csv")
plant <- read.csv("./data/plant_diversity.csv")
# neon related data
neon <- read.csv("./data/grsm_sorted_plot_info.csv")
# sort the neon down
neon %>%
dplyr::select(plotID, elevation) %>%
data.frame() -> neon.elev
#@
df <- merge(df[,1:9], neon.elev, by = "plotID")
df <- merge(df, plant, by = "plotID")
